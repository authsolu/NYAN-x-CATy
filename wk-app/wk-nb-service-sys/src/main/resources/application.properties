nutz.application.name=wk-nb-sys-feign-service
server.port=0

jdbc.url=jdbc:mysql://127.0.0.1:3306/nutzwk_nb?useUnicode=true&characterEncoding=utf8&useSSL=false
jdbc.username=root
jdbc.password=root
jdbc.validationQuery=select 1
jdbc.maxActive=10
jdbc.testWhileIdle=true
jdbc.connectionProperties=druid.stat.slowSqlMillis=2000
jdbc.defaultAutoCommit=true


# Region where the application is deployed.
# - for AWS specify one of the AWS regions
# - for other datacenters specify a arbitrary string indicating the region.
#   This is normally specified as a -D option (eg) -Deureka.region=us-east-1
eureka.region=default

# Name of the application to be identified by other services (in this case, it is the eureka service itself)
#eureka.name=nbclient

# Virtual host name by which the clients identifies this service (in this case, it is the eureka service itself)
eureka.vipAddress=feign-service

# The port where the service will be identified and will be serving requests
#eureka.port=8080

# Set to false as this config is for the eureka client in the eureka server itself.
# The eureka clients running in eureka server needs to connect to servers in other zones.
#
# For other applications this should not be set (default to true) for better zone based load balancing.
eureka.preferSameZone=false

## ------------------------------------------------------------------------------
## The below properties govern how clients should connect to eureka servers.
## In general these can be the same for all clients in the same eureka ecosystem.
## ------------------------------------------------------------------------------

# Change this if you want to use a DNS based lookup for determining other eureka servers (see example below)
eureka.shouldUseDns=false

# Since shouldUseDns is false, we use the following properties to explicitly specify the route to the eureka servers
#eureka.serviceUrl.default=http://eureka.wizzer.cn/eureka/v2
eureka.serviceUrl.default=http://127.0.0.1:8080/eureka/v2

# for the eureka server's own client config, set on-demand update to false as it may be too quick for the REST
# resource initialization
#eureka.shouldOnDemandUpdateStatusChange=false